@page "/saper"
@using Services;
@using Models;


<center>

    @if (_gameService == null || gameLevel.Bombs == 0)
    {
        <DifficultyLevelMenu @bind-GameLevelValue=GameLevel></DifficultyLevelMenu>
    }
    else
    {
                if (gameIsOn)
                {
                    <h2> Game is ON!</h2>
        } else
        {
            if (_gameService.GameResult())
            {
                        <h2>!!!YOU WIN!!!</h2>
            }
            else
            {<h2>GAME OVER</h2>}
                
        <GameField _GameService="@_gameService"></GameField>
        <button @onclick="@StartNewGame">New Game</button>
        <button @onclick="@Restart">Restart</button>
        <div>
            <ul>
                <li><h3>Instrukcja gry:</h3></li>
                <li>Odkryj wszystkie pola nie zawierające bomby, zanim upłynie czas.</li>
                <li>Lewy klawisz myszy odkrywa pole</li>
                <li>Prawy kalwisz myszy oznacza pole</li>
            </ul>
        </div>

    }
</center>

@code {

    GameService _gameService;

    private GameLevel gameLevel;
    private bool gameIsOn=false;

    [Parameter]
    public GameLevel GameLevel
    {
        get => gameLevel; set
        {
            gameLevel = value;
            if (value.Rows > 0 && value.Columns > 0 && value.Bombs < (value.Rows * value.Columns))
                StartGame();
        }
    }


    void StartGame()
    {
        _gameService = new GameService(gameLevel.Rows, gameLevel.Columns, gameLevel.Bombs);
        gameIsOn = true;
    }

    void StartNewGame()
    {
        GameLevel = new GameLevel() { Bombs = 0, Rows = 0, Columns = 0 };
        gameIsOn = true;
    }

    void Restart()
    {
        _gameService.Restart();
        gameIsOn = true;
    }


    protected override void OnInitialized()
    {
        GameLevel = new GameLevel();
    }

    bool IsGameOn()
    {
        return !_gameService.gameOver;
    }

}
