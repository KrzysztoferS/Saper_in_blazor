@using Services;

<link rel="stylesheet" href="css/NodeStyle.css" />
<h3>GameField</h3>
<h3>Time:@gameService.GetTime()</h3>

    <table>
        @for (int i = 0; i < numberOfRows; i++)
        {
            int row = i;
            <tr>
                @for (int j = 0; j < numberOfColumns; j++)
                {
                    int col = j;
                    int ndStatus = (int)gameService.GameField[row, col].nodeStatus;



                    <td class="@GetStyle(row,col)" oncontextmenu="return false;" style="@GetAnimationDelay(row,col)"
                        @onclick="@(e => TableFieldClicked(e, row, col))"
                        @onmouseup="@(e=> CheckButton(e,row,col))"
                        @ondblclick="DbClicked">

                        @if (gameService.GameField[row, col].Visited)
                        {
                            if (ndStatus > 0 && ndStatus <= 8)
                            {
                                @((int)gameService.GameField[row, col].nodeStatus);
                            }
                            else if (gameService.GameField[row, col].nodeStatus == Helpers.NodeStatus.Bomb)
                            {
                                <div>*</div>
                            }
                        }
                        else if (gameService.GameField[row, col].IsFlagged)
                        { <div>f</div>}
                    </td>
                }
            </tr>
        }
    </table>
<br />
<div>Liczba odwiedzoanych wezłów: @visitedNodes </div>
<div>GameOver:@gameOver   </div>
<div>Kliknieto pole:@clickedRow , @clickedCol  </div>
<div>Double Clicked:@dbClick</div>
<div>Klinketo klawisz:@klawisz</div>

@code {
    [Parameter]
    public GameService _GameService { get; set; }


    private int numberOfColumns;
    private int numberOfRows;
    private GameService gameService;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        gameService = _GameService;
        numberOfRows = _GameService.GameField.GetLength(0);
        numberOfColumns = _GameService.GameField.GetLength(1);
        gameService.ParametersChanged += UpdatadeView;
    }


    public int clickedRow, clickedCol;
    public bool dbClick = false;
    public string klawisz = "zaden";
    public int visitedNodes = 0;
    public bool gameOver = false;

    public void TableFieldClicked(MouseEventArgs e, int row, int column)
    {
        clickedCol = column;
        clickedRow = row;
        dbClick = false;
        klawisz = "lewy";
        gameService.OnClick(row, column);
        visitedNodes = gameService.VistedNodes();
        gameOver = gameService.gameOver;
    }

    public void CheckButton(MouseEventArgs e, int row, int col)
    {
        if (e.Button == 2)
        {
            klawisz = "prawy";
            gameService.OnRightClick(row, col);
        }
    }

    public string FieldValue()
    {
        return "dd";
    }

    public string GetStyle(int row, int column)
    {
        if (gameService.GameField[row, column].Visited)
        {
            if (!gameOver)
            {
                switch (gameService.GameField[row, column].nodeStatus)
                {
                    case Helpers.NodeStatus.One:
                        return "one";
                    case Helpers.NodeStatus.Two:
                        return "two";
                    case Helpers.NodeStatus.Three:
                        return "three";
                    case Helpers.NodeStatus.Four:
                        return "four";
                    case Helpers.NodeStatus.Five:
                        return "five";
                    case Helpers.NodeStatus.Six:
                        return "six";
                    case Helpers.NodeStatus.Seven:
                        return "seven";
                    case Helpers.NodeStatus.Eight:
                        return "eight";
                    case Helpers.NodeStatus.Bomb:
                        return "bomb";
                    default:
                        return "empty";
                }
            }
            else if (gameService.GameResult()) return "win";
            else return "loose";
        }

        else if (gameService.GameField[row, column].IsFlagged)
        {
            return "flagged";
        }
        else

            return "hidden";
    }

    public string GetAnimationDelay(int row, int column)
    {
        return "animation - delay:" + gameService.GameField[row, column].AnimationDelay.ToString();
    }

    public void DbClicked()
    {
        dbClick = true;
    }

    public void UpdatadeView(object source, EventArgs args)
    {
        gameOver = gameService.gameOver;
        StateHasChanged();
    }
}
